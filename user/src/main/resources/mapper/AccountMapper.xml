<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace 非常重要：必须是 Mapper 类的全路径-->
<mapper namespace="demo.mapper.AccountMapper">
    <!-- 用户查询结果的列 -->
    <sql id="user_columns">
        user.id AS id, username, password, nickname, email, mobile, phone, avatar, gender, org_id AS orgId, is_enabled AS enabled
    </sql>

    <!-- 使用 ID 查找用户 -->
    <select id="findUserById" parameterType="_long" resultMap="userWithRoles">
        SELECT <include refid="user_columns"/>, user_role.id, user_role.role AS role
        FROM user
            LEFT JOIN user_role ON user.id = user_role.user_id
        WHERE user.id = #{userId}
    </select>

    <!-- 查找机构下指定用户名的用户 -->
    <select id="findUserByUsernameAndOrgId" resultMap="userWithRoles">
        SELECT <include refid="user_columns"/>, user_role.id, user_role.role AS role
        FROM user
            LEFT JOIN user_role ON user.id = user_role.user_id
        WHERE org_id = #{orgId} AND username = #{username}
    </select>

    <!-- 查找机构的用户 -->
    <select id="findUsersByOrgId" resultType="User">
        SELECT <include refid="user_columns"/>
        FROM user
        WHERE org_id = #{orgId}
        LIMIT ${offset}, ${count}
    </select>

    <!-- 插入或更新用户: 如果 ID 存在或者 org_id + username 的组合存在则进行更新 -->
    <insert id="insertOrUpdateUser">
        INSERT INTO user (id, username, password, nickname, email, mobile, phone, gender, org_id)
        VALUES (#{id}, #{username}, #{password}, #{nickname}, #{email}, #{mobile}, #{phone}, #{gender}, #{orgId})

        ON DUPLICATE KEY
        UPDATE username = #{username}, nickname = #{nickname}, email = #{email},
               mobile = #{mobile}, phone = #{phone}, org_id = #{orgId}
    </insert>

    <!-- 创建用户的登录记录 -->
    <update id="insertUserLoginRecord">
        INSERT INTO user_login (user_id, username) VALUES (#{userId}, #{username})
    </update>

    <!-- 更新用户的昵称 -->
    <update id="updateUserNickname">
        UPDATE user SET nickname = #{nickname} WHERE id = #{userId}
    </update>

    <!-- 更新用户的头像 -->
    <update id="updateUserAvatar">
        UPDATE user SET avatar = #{avatar} WHERE id = #{userId}
    </update>

    <!-- 更新用户的性别 -->
    <update id="updateUserGender">
        UPDATE user SET gender = #{gender} WHERE id = #{userId}
    </update>

    <!-- 更新用户的手机号 -->
    <update id="updateUserMobile">
        UPDATE user SET mobile = #{mobile} WHERE id = #{userId}
    </update>

    <!-- 更新用户的密码 -->
    <update id="updateUserPassword">
        UPDATE user SET password = #{password} WHERE id = #{userId}
    </update>

    <!-- 插入用户的角色 -->
    <insert id="insertUserRole">
        INSERT IGNORE INTO user_role(user_id, role) VALUES (#{userId}, #{role})
    </insert>

    <!-- 通过角色和机构 ID 查询用户 -->
    <select id="findUsersByRoleAndOrgId" resultType="com.edu.training.bean.UserBaseInfo">
        SELECT
            u.id AS userId,
            u.username,
            u.nickname,
            u.is_enabled AS enabled
        FROM user u
        LEFT JOIN user_role ur ON u.id = ur.user_id
        WHERE ur.role = #{role} AND u.org_id = #{orgId}
        ORDER BY updated_at DESC
        LIMIT ${offset}, ${pageSize}
    </select>

    <!-- 根据角色、机构 ID 查询总记录数 -->
    <select id="countUsersByRoleAndOrgId" resultType="int">
        SELECT COUNT(1)
        FROM user u
        LEFT JOIN user_role ur ON u.id = ur.user_id
        WHERE u.org_id = #{orgId} AND ur.role = #{role}
    </select>

    <!-- 查询指定机构的用户人脸签到记录 (人脸签到记录) -->
    <select id="findFaceSignInRecordUsersByOrgId" resultType="com.edu.training.bean.UserBaseInfo">
        SELECT distinct
        u.id AS userId,
        u.username,
        u.avatar,
        u.nickname
        FROM ( select user_id from face_sign_in_record where org_id = #{orgId}) as fc
        LEFT JOIN user u ON fc.user_id = u.id
        WHERE u.org_id = #{orgId}
        <if test="nickname != null and nickname != '' ">
            AND u.nickname like CONCAT('%', #{nickname}, '%')
        </if>
        <if test="username != null and username != '' ">
            AND u.username like CONCAT('%', #{username}, '%')
        </if>
        ORDER BY u.updated_at DESC
        LIMIT ${offset}, ${pageSize}
    </select>

    <!-- 查询指定机构的用户人脸签到记录 (人脸签到记录), 总记录数 -->
    <select id="countFaceSignInRecordUsersByOrgId" resultType="int">
        SELECT COUNT(distinct u.id)
        FROM ( select user_id from face_sign_in_record where org_id = #{orgId}) as fc
        LEFT JOIN user u ON fc.user_id = u.id
        WHERE u.org_id = #{orgId}
        <if test="nickname != null and nickname != '' ">
            AND u.nickname like CONCAT('%', #{nickname}, '%')
        </if>
        <if test="username != null and username != '' ">
            AND u.username like CONCAT('%', #{username}, '%')
        </if>

    </select>

    <!-- 注册的用户名在机构是否可用 -->
    <select id="isUsernameAvailable" resultType="boolean">
        SELECT NOT EXISTS (
            SELECT 1 FROM user WHERE org_id = #{orgId} AND username = #{username}
        )
    </select>

    <!-- 根据用户 ID 查询用户登录信息 -->
    <select id="findUserLoginByUserId" resultType="UserLogin">
        SELECT
          user_id, COUNT(user_id) as loginCount, MAX(created_at) AS createdAt
        FROM user_login WHERE user_id = #{userId}
    </select>

    <!-- 通过用户 ID、机构 ID 查询班级列表 -->
    <select id="findClazzesByUserIdAndOrgId" resultMap="clazzMap">
        SELECT
            cz.id, cz.org_id, cz.project_id, cz.name, cz.type, cz.phases,
            p.id AS p_id, p.name AS p_name, p.code AS p_code, p.executive AS p_executive, p.executive_type AS p_executive_type
        FROM
            clazz cz
        LEFT JOIN clazz_student st ON st.clazz_id = cz.id
        LEFT JOIN project p ON cz.project_id = p.id
        WHERE st.student_id=#{userId} AND cz.org_id=#{orgId}
    </select>

    <!-- 启用禁用用户 -->
    <update id="updateUserStatus">
        UPDATE user SET is_enabled = #{enabled} WHERE id = #{userId}
    </update>

    <!-- 用户，包含角色信息 -->
    <resultMap id="userWithRoles" type="User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="email"    column="email"/>
        <result property="mobile"   column="mobile"/>
        <result property="phone"    column="phone"/>
        <result property="avatar"   column="avatar"/>
        <result property="orgId"    column="orgId"/>
        <result property="gender"   column="gender"/>
        <result property="enabled"  column="enabled"/>

        <collection property="roles" ofType="string" javaType="java.util.HashSet">
            <result column="role"/>
        </collection>
    </resultMap>

    <!-- 班级的 ResultMap -->
    <resultMap id="clazzMap" type="com.edu.training.bean.clazz.Clazz">
        <id property="id" column="id"/>
        <result property="orgId" column="org_id"/>
        <result property="projectId" column="project_id"/>
        <result property="name" column="name"/>
        <result property="type" column="type"/>
        <result property="phasesJson" column="phases"/>

        <association property="project" columnPrefix="p_" resultMap="projectResultMap"/>
    </resultMap>

    <!-- 项目的 ResultMap -->
    <resultMap id="projectResultMap" type="Project">
        <id property="id" column="id"/>
        <result property="name"  column="name"/>
        <result property="code"  column="code"/>
        <result property="executive"      column="executive"/>
        <result property="executiveType"  column="executive_type"/>
    </resultMap>
</mapper>
